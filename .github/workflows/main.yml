name: SonarQube_ON

on:
  workflow_dispatch: # This enables manual trigger

jobs:
  sonarqube_on:
    runs-on: ubuntu-latest
    
    steps:

    - name: Start SonarQube via API
      run: |
        curl -X POST https://ftqp5itzh1.execute-api.ap-south-1.amazonaws.com/default/sonarqube_control \
        -H "Content-Type: application/json" \
        -d '{"control":"start"}'     

    - name: Get Public IP
      id: get-ip
      run: echo "RUNNER_IP=$(curl -s ifconfig.me)" >> $GITHUB_ENV

    - name: Configure AWS CLI & Update Security Group
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} --protocol tcp --port 9000 --cidr "${{ env.RUNNER_IP }}/32"
        aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr "${{ env.RUNNER_IP }}/32"    

    - name: Add SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa    

    - name: Connect to EC2 & Start SonarQube
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
        cd /opt/sonarqube-25.3.0.104237/bin/linux-x86-64
        ./sonar.sh start
        EOF
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Remove Runner IP from Security Group
      if: always()  # Ensures cleanup runs even if the previous step fails
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} --protocol tcp --port 9000 --cidr "${{ env.RUNNER_IP }}/32"
        aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr "${{ env.RUNNER_IP }}/32"         
